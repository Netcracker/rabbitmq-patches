name: "Integration RabbitMQ"
run-name: "RabbitMQ version ${{ inputs.rabbitmq-tag }}"

on:
  workflow_dispatch:
    inputs:
      rabbitmq-tag:
        description: "RabbitMQ version to build"
        required: true
        default: "v4.1.2"
      tag:
        description: "Tag to create for assets upload"
        required: true
        default: "v4.1.2-patched"
      docker-library-rabbitmq:
        description: "RabbitMQ docker-library version"
        required: true
        type: choice
        options:
          - "4.1"
          - "4.2"
      forceCreate:
        type: boolean
        description: "Override tag name (default: true)"
        required: false
        default: true

permissions:
  contents: write
  packages: write

jobs:
  build-rabbitmq:
    runs-on: ubuntu-latest
    env:
      RABBITMQ_TAG: ${{ inputs.rabbitmq-tag }}
      TAG: ${{ inputs.tag }}
      DOCKER_LIBRARY_RABBITMQ: ${{ inputs.docker-library-rabbitmq }}
      FORCE_CREATE: ${{ inputs.forceCreate }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create a New Tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@v2.0.1
        with:
          ref: ${{ github.ref_name }}
          tag-name: ${{ inputs.tag }}
          force-create: ${{ inputs.forceCreate }}
          switch-to-tag: true
          create-release: true
          skip-checkout: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        run: rm -rf ./*

      - name: "Checkout RabbitMQ source"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.rabbitmq-tag }}
          repository: "rabbitmq/rabbitmq-server"

      - name: Checkout rabbitmq-patches
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          path: rabbitmq-patches

      - name: Apply patches
        run: |
          for p in ./rabbitmq-patches/rabbitmq-patches/${{ inputs.rabbitmq-tag }}/*.patch; do
            echo "Applying $p…"
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
          rm -rf ./rabbitmq-patches

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null <<'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo add-apt-repository ppa:rabbitmq/rabbitmq-erlang -y
          sudo apt-get update
          sudo apt-get install -y git elixir erlang erlang-nox xmlto \
            build-essential debhelper erlang-dev
          sudo snap install libxslt

      - name: "Build RabbitMQ generic-unix package"
        run: |
          make package-generic-unix PROJECT_VERSION=${{ env.VERSION }}
        env:
          VERSION: ${{ inputs.rabbitmq-tag }}

      - name: "Check built packages"
        run: |
          echo "=== PACKAGES directory ==="
          ls -lh PACKAGES
          echo "=== Inside tarball ==="
          tar -tf PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz | grep sbin/

      - name: "Checkout docker-library/rabbitmq"
        uses: actions/checkout@v4
        with:
          ref: master
          repository: "docker-library/rabbitmq"
          path: docker-library-rabbitmq

      - name: "Build base RabbitMQ image"
        run: |
          cd docker-library-rabbitmq/${{ env.DOCKER_LIBRARY_RABBITMQ }}/alpine

          echo "Patching Dockerfile to use local RabbitMQ build..."
          # заменяем блок wget → COPY и добавляем ENV сразу туда же
          sed -i '/wget --output-document "\$RABBITMQ_PATH.tar.xz.asc"/,/grep -qE .SYS_PREFIX=/c\
          COPY ../../../PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz /tmp/rabbitmq.tar.xz\n\
          ENV RABBITMQ_HOME=/opt/rabbitmq\n\
          ENV PATH=$RABBITMQ_HOME/sbin:$PATH\n\
          RUN set -eux; \\\n\
              mkdir -p \"$RABBITMQ_HOME\"; \\\n\
              tar --extract --file /tmp/rabbitmq.tar.xz --directory \"$RABBITMQ_HOME\"; \\\n\
              echo \"=== Extracted files ===\"; \\\n\
              find \"$RABBITMQ_HOME\" -maxdepth 2 -type d; \\\n\
              rm /tmp/rabbitmq.tar.xz;' Dockerfile

          echo "Check Dockerfile ENV presence:"
          grep "RABBITMQ_HOME" Dockerfile || echo "WARNING: ENV not inserted!"

          docker build \
            --build-arg RABBITMQ_VERSION=${{ inputs.rabbitmq-tag }} \
            -t ghcr.io/${{ github.repository_owner }}/rabbitmq-base:${{ inputs.tag }} .

          docker run --rm ghcr.io/${{ github.repository_owner }}/rabbitmq-base:${{ inputs.tag }} ls -l /opt/rabbitmq/sbin || true

      - name: Verify base image
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/rabbitmq-base:${{ inputs.tag }} ls -l /opt/rabbitmq/sbin

      - name: "Login to GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Push base image"
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/rabbitmq-base:${{ inputs.tag }}

      - name: "Build management RabbitMQ image"
        run: |
          cd docker-library-rabbitmq/${{ env.DOCKER_LIBRARY_RABBITMQ }}/alpine/management
          sed -i 's|^FROM rabbitmq:.*|FROM ghcr.io/${{ github.repository_owner }}/rabbitmq-base:${{ inputs.tag }}|' Dockerfile
          docker build -t ghcr.io/${{ github.repository_owner }}/rabbitmq:${{ inputs.tag }}-management .

      - name: "Push management image"
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/rabbitmq:${{ inputs.tag }}-management

      - name: "Upload assets"
        uses: netcracker/qubership-workflow-hub/actions/assets-action@main
        with:
          tag: ${{ inputs.tag }}
          item-path: PACKAGES/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
