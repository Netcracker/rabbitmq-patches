name: "Integration RabbitMQ"
run-name: "RabbitMQ version ${{ inputs.rabbitmq-tag }}"

on:
  workflow_dispatch:
    inputs:
      rabbitmq-tag:
        description: "RabbitMQ version to build"
        required: true
        default: "v4.1.2"
      tag:
        description: "Tag for release and Docker images"
        required: true
        default: "v4.1.2-patched"
      docker-library-rabbitmq:
        description: "RabbitMQ docker-library version"
        required: true
        type: choice
        options:
          - "4.1"
          - "4.2"
      forceCreate:
        type: boolean
        description: "Override tag name (default: true)"
        default: true

permissions:
  contents: write
  packages: write

jobs:
  build-rabbitmq:
    runs-on: ubuntu-latest
    env:
      RABBITMQ_TAG: ${{ inputs.rabbitmq-tag }}
      TAG: ${{ inputs.tag }}
      DOCKER_LIBRARY_RABBITMQ: ${{ inputs.docker-library-rabbitmq }}
      IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
      BASE_IMAGE_NAME: qubership-rabbitmq-base
      MGMT_IMAGE_NAME: qubership-rabbitmq-management

    steps:
      # --- –ò—Å—Ö–æ–¥–Ω–∏–∫–∏ RabbitMQ ---
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create a release tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@v2.0.1
        with:
          ref: ${{ github.ref_name }}
          tag-name: ${{ inputs.tag }}
          force-create: ${{ inputs.forceCreate }}
          switch-to-tag: true
          create-release: true
          skip-checkout: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup workspace
        run: rm -rf ./*

      - name: Checkout RabbitMQ source
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: ${{ inputs.rabbitmq-tag }}

      - name: Checkout rabbitmq-patches
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          path: rabbitmq-patches

      - name: Apply patches
        run: |
          for p in ./rabbitmq-patches/rabbitmq-patches/${{ inputs.rabbitmq-tag }}/*.patch; do
            echo "Applying $p..."
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
          rm -rf ./rabbitmq-patches

      # - name: Install build prerequisites
      #   run: |
      #     sudo apt-get update
      #     sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null <<'EOF'
      #     path-exclude /usr/share/doc/*
      #     path-exclude /usr/share/man/*
      #     path-exclude /usr/share/info/*
      #     EOF
      #     sudo add-apt-repository ppa:rabbitmq/rabbitmq-erlang -y
      #     sudo apt-get update
      #     sudo apt-get install -y git elixir erlang erlang-nox xmlto \
      #       build-essential debhelper erlang-dev
      #     sudo snap install libxslt

      # - name: Build RabbitMQ generic-unix package
      #   run: make package-generic-unix PROJECT_VERSION=${{ inputs.rabbitmq-tag }}

      # - name: Verify built package
      #   run: |
      #     echo "=== PACKAGES directory ==="
      #     ls -lh PACKAGES
      #     echo "=== TAR content ==="
      #     tar -tf PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz | grep sbin/ || echo "No sbin found"

      # --- Dockerfile –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø–∞—Ç—á–∏–Ω–≥ ---
      - name: Checkout docker-library/rabbitmq
        uses: actions/checkout@v4
        with:
          repository: docker-library/rabbitmq
          ref: master
          path: docker-library

      - name: Patch docker-library templates
        shell: bash
        run: |
          cd docker-library
          echo "::group::üß© Patching Dockerfile-alpine.template"

          # –î–æ–±–∞–≤–ª—è–µ–º ARG –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
          sed -i '/# Use the latest stable RabbitMQ release/a ARG RABBITMQ_SOURCE_URL=""' Dockerfile-alpine.template

          # –í—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏ RabbitMQ
          awk '
            BEGIN {in_rmq=0}
            /# Use the latest stable RabbitMQ release/ {in_rmq=1}
            in_rmq && /wget --output-document "\$RABBITMQ_PATH\.tar\.xz\.asc"/ {
              print "if [ -f \"$RABBITMQ_SOURCE_URL\" ]; then \\"
              print "  echo \"Using local RabbitMQ package: $RABBITMQ_SOURCE_URL\"; \\"
              print "  cp \"$RABBITMQ_SOURCE_URL\" \"$RABBITMQ_PATH.tar.xz\"; \\"
              print "else \\"
            }
            {print}
            in_rmq && /rm -rf "\$GNUPGHOME"; \\/ {
              print "fi; \\"
              in_rmq=0
            }
          ' Dockerfile-alpine.template > tmp && mv tmp Dockerfile-alpine.template

          echo "::endgroup::"

          echo "::group::üß© Patching Dockerfile-management.template"
          sed -i '1iARG BASE_IMAGE=""' Dockerfile-management.template
          sed -E -i 's|^FROM[[:space:]]+(\{\{.*\}\})|FROM ${BASE_IMAGE:-\1}|' Dockerfile-management.template
          echo "::endgroup::"


      - name: Generate Dockerfiles
        run: |
          cd docker-library
          ./versions.sh
          ./apply-templates.sh ${{ inputs.docker-library-rabbitmq }}

      - name: Show generated Dockerfiles
        run: |
          echo "::group::üêã BASE Dockerfile (alpine)"
          cat docker-library/${{ inputs.docker-library-rabbitmq }}/alpine/Dockerfile
          echo "::endgroup::"

          echo "::group::üêã MANAGEMENT Dockerfile (alpine)"
          cat docker-library/${{ inputs.docker-library-rabbitmq }}/alpine/management/Dockerfile
          echo "::endgroup::"

      # - name: Prepare build context
      #   run: |
      #     cp PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz docker-library/${{ inputs.docker-library-rabbitmq }}/alpine/

      # # --- –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–æ–≤ ---
      # - name: Build base Docker image
      #   run: |
      #     cd docker-library/${{ inputs.docker-library-rabbitmq }}/alpine
      #     docker build \
      #       --build-arg RABBITMQ_SOURCE_URL="./rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz" \
      #       -t $IMAGE_REGISTRY/$BASE_IMAGE_NAME:${{ inputs.tag }} .

      # - name: Build management Docker image
      #   run: |
      #     cd docker-library/${{ inputs.docker-library-rabbitmq }}/alpine/management
      #     docker build \
      #       --build-arg BASE_IMAGE=$IMAGE_REGISTRY/$BASE_IMAGE_NAME:${{ inputs.tag }} \
      #       -t $IMAGE_REGISTRY/$MGMT_IMAGE_NAME:${{ inputs.tag }} .

      # # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ ---
      # - name: Test RabbitMQ base image
      #   run: |
      #     docker run -d --rm --name test-rabbit -p 5672:5672 $IMAGE_REGISTRY/$BASE_IMAGE_NAME:${{ inputs.tag }}
      #     sleep 15
      #     docker logs test-rabbit | grep "Server startup complete"
      #     docker exec test-rabbit rabbitmqctl status
      #     docker stop test-rabbit

      # - name: Test RabbitMQ management image
      #   run: |
      #     docker run -d --rm --name test-rabbit-mgmt -p 15672:15672 $IMAGE_REGISTRY/$MGMT_IMAGE_NAME:${{ inputs.tag }}
      #     sleep 15
      #     docker logs test-rabbit-mgmt | grep "Server startup complete"
      #     docker exec test-rabbit-mgmt rabbitmq-plugins list -E | grep rabbitmq_management
      #     docker stop test-rabbit-mgmt

      # # --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è ---
      # - name: Log in to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Push Docker images
      #   run: |
      #     docker push $IMAGE_REGISTRY/$BASE_IMAGE_NAME:${{ inputs.tag }}
      #     docker push $IMAGE_REGISTRY/$MGMT_IMAGE_NAME:${{ inputs.tag }}
