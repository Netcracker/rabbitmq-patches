name: "Integration RabbitMQ"
run-name: "RabbitMQ version ${{ inputs.rabbitmq-tag }}"

on:
  workflow_dispatch:
    inputs:
      rabbitmq-tag:
        description: "RabbitMQ version to build"
        required: true
        default: "v4.1.2"
      tag:
        description: "Tag for release and Docker images"
        required: true
        default: "v4.1.2-patched"
      docker-library-rabbitmq:
        description: "RabbitMQ docker-library version"
        required: true
        type: choice
        options:
          - "4.1"
          - "4.2"
      forceCreate:
        type: boolean
        description: "Override tag name (default: true)"
        default: true

permissions:
  contents: write
  packages: write

jobs:
  build-rabbitmq:
    runs-on: ubuntu-latest
    env:
      RABBITMQ_TAG: ${{ inputs.rabbitmq-tag }}
      TAG: ${{ inputs.tag }}
      DOCKER_LIBRARY_RABBITMQ: ${{ inputs.docker-library-rabbitmq }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create a release tag
        uses: netcracker/qubership-workflow-hub/actions/tag-action@v2.0.1
        with:
          ref: ${{ github.ref_name }}
          tag-name: ${{ inputs.tag }}
          force-create: ${{ inputs.forceCreate }}
          switch-to-tag: true
          create-release: true
          skip-checkout: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup workspace
        run: rm -rf ./*

      - name: Checkout RabbitMQ source
        uses: actions/checkout@v4
        with:
          repository: rabbitmq/rabbitmq-server
          ref: ${{ inputs.rabbitmq-tag }}

      - name: Checkout rabbitmq-patches
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}
          path: rabbitmq-patches

      - name: Apply patches
        run: |
          for p in ./rabbitmq-patches/rabbitmq-patches/${{ inputs.rabbitmq-tag }}/*.patch; do
            echo "Applying $p..."
            git apply -p1 --ignore-space-change --ignore-whitespace "$p"
          done
          rm -rf ./rabbitmq-patches

      - name: Install build prerequisites
        run: |
          sudo apt-get update
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null <<'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo add-apt-repository ppa:rabbitmq/rabbitmq-erlang -y
          sudo apt-get update
          sudo apt-get install -y git elixir erlang erlang-nox xmlto \
            build-essential debhelper erlang-dev
          sudo snap install libxslt

      - name: Build RabbitMQ generic-unix package
        run: make package-generic-unix PROJECT_VERSION=${{ env.VERSION }}
        env:
          VERSION: ${{ inputs.rabbitmq-tag }}

      - name: Verify built package
        run: |
          echo "=== PACKAGES directory ==="
          ls -lh PACKAGES
          echo "=== TAR content ==="
          tar -tf PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz | grep sbin/ || echo "No sbin found"

      # 👇 Новый блок — Docker build

      - name: Checkout docker-library/rabbitmq
        uses: actions/checkout@v4
        with:
          repository: docker-library/rabbitmq
          ref: master
          path: docker-library

      - name: Apply template modifications
        run: |
          cd docker-library
          ./versions.sh
          ./apply-templates.sh ${{ inputs.docker-library-rabbitmq }}

      - name: Prepare build context
        run: |
          cp PACKAGES/rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz docker-library/${{ inputs.docker-library-rabbitmq }}/alpine/
          cd docker-library/${{ inputs.docker-library-rabbitmq }}/alpine
          ls -lh

      - name: Build Docker image
        run: |
          cd docker-library/${{ inputs.docker-library-rabbitmq }}/alpine
          docker build \
            --build-arg RABBITMQ_SOURCE_URL="./rabbitmq-server-generic-unix-${{ inputs.rabbitmq-tag }}.tar.xz" \
            -t ghcr.io/${{ github.repository }}/rabbitmq:${{ inputs.tag }} .

      - name: Push Docker image
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR
        run: docker push ghcr.io/${{ github.repository }}/rabbitmq:${{ inputs.tag }}
